São apresentados três tipos de tabelas: hash-distributed, round robin e replicated, com orientações específicas para cada uma delas. Para as tabelas hash-distributed, é importante escolher a coluna correta para distribuição de dados, evitando problemas de distribuição desigual e processamento desbalanceado. Para tabelas round robin, que distribuem as linhas uniformemente em todas as partições, são recomendadas para casos em que não há junções entre tabelas e quando não há uma coluna clara para distribuição de hash. Já as tabelas replicadas são úteis para tabelas menores que 2GB e com poucas operações de inserção, atualização e exclusão, sendo recomendadas para tabelas de dimensão.

"So in this chapter, I just wanna go through some important points when it comes to designing your tables in Azure Synapse. So first, when it comes to hash-distributed tables. So this table takes the data and distributes the rows across the compute nodes. The distribution of data is done via the deterministic hash function that assigns each row onto one distribution. Always consider using hash-distributed tables if the table size is more than two gigs on the disk. Next, when it comes to choosing a distribution column. So remember when you create your hash-distributed tables you have to decide which table column will actually be used for distributing the data. So when choosing a column, ensure that you avoid something known as data and processing skew. So data skew means that the data is not distributed evenly across all of the distributions. So if you don't have many unique values, right? For the column value itself, all of the data might result in the same hash. And that means all of the data might be in the same distribution, so it'll not be equally distributed across the 60 distributions. And that would lead onto processing skew because then if your data is only in a set of distributions and not across all distributions then when you are processing the data based on the queries that processing will only be done on some distributions and not all of the distributions itself. So it's very important to choose the right column when it comes to a hash-distributed table. So choose a column for distribution that has many unique values, that does not have nulls or has very few nulls is not a date column. Try not to use a date column because if the date does not change, again, it'll go ahead and put everything in one distribution.

"Is" used commonly in the join, the group by and having clauses as part of your query. "Is not" used in the where clause. Now where clause is used for filtering your results and using hash-distributed tables is not ideal for that column that is used in your where clauses. For that there is a separate technique known as partitioning which will go through a little bit later on.

Next your round robin tables. So this type of table distributes rows evenly across all distributions. If a query needs data from different distributions then the data movement might be acquired to get the results of the query. Now, if there are no JOINs performed on the tables then you can consider using this table type. Also, if you don't have a clear candidate column for hash-distributed table, then you can consider using round robin tables. Sometimes your temporary staging tables can actually use the round robin tables because it's easy, it's faster for loading the data. So then once you have your staging tables you've done your transformations, everything is in place then you can copy the data from the staging table onto your final table in Azure Synapse and use a different distribution type for that particular destination table.

And then, we have replicated table. Your each compute node has a full copy of the table. Consider using replicated tables when the table size is less than two gigs in compressed format. And it's always good to consider this table type for your dimension tables. Don't consider this table type, if the table has frequent insert update and delete statements. This could actually require (indistinct) of the replicated table. And normally when it comes to your dimension tables you won't have that many inserts, updates or delete statements.

Right. So in this chapter, I just wanna kind of go through some important points when it comes to the different table types."